<?php

namespace App\Http\Controllers\API{{prefix}};

use App\Http\Controllers\Controller;
use Kareem22t\StructureMyModule\ApiResponse;
use App\Http\Resources{{prefix}}\{{name}}Resource;
use App\Http\Resources{{prefix}}\{{name}}Collection;
use App\Services{{prefix}}\{{name}}Service;
use App\Http\Requests{{prefix}}\Store{{name}}Request;
use App\Http\Requests{{prefix}}\Update{{name}}Request;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Log;

class {{name}}Controller extends Controller
{
    protected $service;

    public function __construct({{name}}Service $service)
    {
        $this->service = $service;
    }

    public function index()
    {
        try {
            $entities = $this->service->getAll{{names}}();
            return ApiResponse::success(
                new {{name}}Collection($entities),
                '{{name}} list retrieved successfully'
            );
        } catch (\Exception $e) {
            return ApiResponse::error(
                'Error retrieving {{name}} list',
                ['error' => $e->getMessage()]
            );
        }
    }

    public function show($id)
    {
        try {
            $entity = $this->service->get{{name}}ById($id);
            
            if (!$entity) {
                return ApiResponse::error(
                    '{{name}} not found',
                    ['id' => 'Record not found'],
                    404
                );
            }

            return ApiResponse::success(
                new {{name}}Resource($entity),
                '{{name}} retrieved successfully'
            );
        } catch (\Exception $e) {
            return ApiResponse::error(
                'Error retrieving {{name}}',
                ['error' => $e->getMessage()]
            );
        }
    }

    public function store(Store{{name}}Request $request)
    {
        try {
            $data = $request->validated();
            $entity = $this->service->create{{name}}($data);
            
            return ApiResponse::success(
                new {{name}}Resource($entity),
                '{{name}} created successfully',
                201
            );
        } catch (ValidationException $e) {
            return ApiResponse::error(
                'Validation error',
                $e->errors(),
                422
            );
        } catch (\Exception $e) {
            Log::error('Error creating {{name}}', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return ApiResponse::error(
                'Error creating {{name}}',
                ['error' => $e->getMessage()]
            );
        }
    }

    public function update(Update{{name}}Request $request, $id)
    {
        try {
            $data = $request->validated();
            $entity = $this->service->update{{name}}($id, $data);
            
            if (!$entity) {
                return ApiResponse::error(
                    '{{name}} not found',
                    ['id' => 'Record not found'],
                    404
                );
            }

            return ApiResponse::success(
                new {{name}}Resource($entity),
                '{{name}} updated successfully'
            );
        } catch (ValidationException $e) {
            return ApiResponse::error(
                'Validation error',
                $e->errors(),
                422
            );
        } catch (\Exception $e) {
            Log::error('Error updating {{name}}', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return ApiResponse::error(
                'Error updating {{name}}',
                ['error' => $e->getMessage()]
            );
        }
    }

    public function destroy($id)
    {
        try {            
            $result = $this->service->delete{{name}}($id);

            return ApiResponse::success(
                null,
                '{{name}} deleted successfully'
            );
        } catch (\Exception $e) {
            Log::error('Error deleting {{name}}', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return ApiResponse::error(
                'Error deleting {{name}}',
                ['error' => $e->getMessage()]
            );
        }
    }
}